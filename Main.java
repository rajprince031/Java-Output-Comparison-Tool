import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Random;

/**
 * This program is designed to compare the output of two Java programs
 * by generating random test cases and executing both programs with the
 * same input. It checks whether their outputs match and prints the
 * results if there is a mismatch.
 */
public class Main {
    public static void main(String[] args) {
        // Ensure that the correct number of command-line arguments are provided
        if (args.length < 4) {
            System.err.println("Usage: java Main <path1> <class1> <path2> <class2>");
            System.exit(1);
        }

        // Extract the paths and class names for the two programs to compare
        String path1 = args[0];
        String class1 = args[1];
        String path2 = args[2];
        String class2 = args[3];

        // Initialize random number generator
        Random random = new Random();
        boolean testPassed = false;
        int count = 0;

        // Continue generating and testing cases until a mismatch is found
        while (!testPassed) {
            // Build a test case with a random input
            StringBuilder pass = new StringBuilder();
            int n = random.nextInt(10) + 1; // Random size for the array
            pass.append(n).append(' ');
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = random.nextInt(100) + 1; // Random integer values
                pass.append(arr[i]).append(' ');
            }
            int query = random.nextInt(10) + 1; // Random number of queries
            pass.append(query).append(' ');
            for (int i = 0; i < query; i++) {
                int q = random.nextInt(10) + 1; // Random query values
                pass.append(q).append(' ');
            }

            // Convert the generated input into a string format
            String testInput = pass.toString().trim();

            try {
                // Execute the first program and capture its output
                Process process1 = new ProcessBuilder("java", "-cp", path1, class1, testInput).start();
                InputStreamReader isr1 = new InputStreamReader(process1.getInputStream());
                BufferedReader br1 = new BufferedReader(isr1);
                String output1 = br1.readLine(); // Output from the first program

                // Execute the second program and capture its output
                Process process2 = new ProcessBuilder("java", "-cp", path2, class2, testInput).start();
                InputStreamReader isr2 = new InputStreamReader(process2.getInputStream());
                BufferedReader br2 = new BufferedReader(isr2);
                String output2 = br2.readLine(); // Output from the second program

                // Trim any extra whitespace from the outputs
                if (output2 != null && output1 != null) {
                    output2 = output2.trim();
                    output1 = output1.trim();
                }

                // Compare the outputs and print the results if they do not match
                if (!output1.equals(output2)) {
                    System.out.println("Input Test Case:\n" + testInput);
                    System.out.println();
                    System.out.println("Output Generated by First Program:\n" + output1);
                    System.out.println();
                    System.out.println("Output Generated by Second Program:\n" + output2);
                    System.out.println();
                    System.out.println("Test case Failed");
                    testPassed = true;
                } else {
                    // If outputs match, increment the count of passing test cases
                    System.out.println("No. of test cases pass :- " + count++);
                }

            } catch (IOException e) {
                // Handle IOExceptions during process execution
                System.err.println("Error executing processes:");
                e.printStackTrace();
            } catch (NumberFormatException e) {
                // Handle NumberFormatException if output parsing fails
                System.err.println("Error parsing output: " + e.getMessage());
                e.printStackTrace();
            } catch (Exception e) {
                // Handle any other exceptions
                System.err.println("An unexpected error occurred: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
}
